name: CI
on: push

env:
  REGISTRY: ghcr.io
  UI_IMAGE_NAME: ${{ github.repository }}-ui
  API_IMAGE_NAME: ${{ github.repository }}-api
  DATABASE_URL: "postgresql://fastapi_traefik:fastapi_traefik@0.0.0.0:5432/fastapi_traefik"

jobs:
  Prettier:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}
          persist-credentials: false

      - name: Prettify code
        uses: creyD/prettier_action@v4.2
        with:
          prettier_options: --write **/*.{js,md}
          github_token: ${{ secrets.GITHUB_TOKEN }}
  Black:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v2
      - name: Check files using the black formatter
        uses: rickstaa/action-black@v1
        id: action_black
        with:
          black_args: "."
      - name: Create Pull Request
        if: steps.action_black.outputs.is_formatted == 'true'
        uses: peter-evans/create-pull-request@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          title: "Format Python code with psf/black push"
          commit-message: ":art: Format Python code with psf/black"
          body: |
            There appear to be some python formatting errors in ${{ github.sha }}. This pull request
            uses the [psf/black](https://github.com/psf/black) formatter to fix these issues.
          base: ${{ github.head_ref }} # Creates pull request onto pull request or commit branch
          branch: actions/black
  PythonAutoflake:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v2
      - name: Install autoflake from PyPI
        uses: install-pinned/autoflake@dfa39c5f136f5b885c175734a719dc6ad1f11fc7 # 2.0.1
      - name: run autoflake
        run: autoflake --remove-unused-variables -r -c app
  NPMAudit:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    name: NPM Audit (and fix)
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - run: npm i --package-lock-only
      - name: NPM Audit
        uses: luisfontes19/npm-audit-action@v0.1.0
        with:
          project-path: "."
          fix: true
          force: true
          git-user: action-npm-audit
          git-email: action-npm-audit
          git-message: npm fix run from npm-audit action
          git-pr-title: NPM audit fix
          git-branch: npm-audit-action
          git-remote: origin
          github-token: ${{ secrets.GITHUB_TOKEN }}
  Pytest:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Build project
        run: docker compose up --build -d

      - name: Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest pytest-cov
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Set correct timezone
        uses: zcong1993/setup-timezone@master
        with:
          timezone: Europe/London

      - name: Run Tests
        working-directory: ./backend
        run: pytest

  DockerUI:
    defaults:
      run:
        working-directory: frontend
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.UI_IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: ./frontend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
  DockerAPI:
    defaults:
      run:
        working-directory: backend
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.API_IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: ./backend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
